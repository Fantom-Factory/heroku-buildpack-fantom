#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# fantom download urls - let's future proof a couple of versions!
FANTOM_URL_1_0_79="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.79.zip"
FANTOM_URL_1_0_78="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.78.zip"
FANTOM_URL_1_0_77="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.77.zip"
FANTOM_URL_1_0_76="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.76.zip"
FANTOM_URL_1_0_75="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.75.zip"
FANTOM_URL_1_0_74="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.74.zip"
FANTOM_URL_1_0_73="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.73.zip"
FANTOM_URL_1_0_72="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.72.zip"
FANTOM_URL_1_0_71="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.71.zip"
FANTOM_URL_1_0_70="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.70.zip"

FANTOM_URL_1_0_69="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.69.zip"
FANTOM_URL_1_0_68="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.68.zip"
FANTOM_URL_1_0_67="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.67.zip"
FANTOM_URL_1_0_66="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.66.zip"
FANTOM_URL_1_0_65="http://fan.googlecode.com/files/fantom-1.0.65.zip"

# absolute path
BIN_DIR=$(cd $(dirname $0); pwd)
OPT_DIR=$(cd $BIN_DIR/../opt; pwd)

# parse args
BUILD_DIR=$1
CACHE_DIR=$2



# ---- Read Heroku Props ----

# Note we need the FAN_VERSION because it's inside the the zip entires! 
# e.g. /fantom-1.0.67/bin/fan.exe

# set default values
FAN_VERSION="1.0.67"
FAN_BUILD_TARGET="compile"
JAVA_VERSION="1.6"

if [ ! -f ${BUILD_DIR}/heroku.props ]; then
  if [ -f ${BUILD_DIR}/system.properties ]; then
    echo "-----> WARN: Copying deprecated 'system.properties' to 'heroku.props'"
    cp ${BUILD_DIR}/system.properties ${BUILD_DIR}/heroku.props
  fi
fi

echo ""
if [ -f ${BUILD_DIR}/heroku.props ]; then
  echo "-----> Reading file 'heroku.props'...:"
  
  # http://stackoverflow.com/questions/4990575/need-bash-shell-script-for-reading-name-value-pairs-from-a-file
  while IFS="=" read -r key value; do
    case "$key" in
      "fantom.version")       FAN_VERSION="$value" ;;
      "fantom.downloadUrl")   FAN_URL="$value" ;;
      "fantom.buildTarget")   FAN_BUILD_TARGET="$value" ;;
      "java.runtime.version") JAVA_VERSION="$value" ;;
    esac
  done < "${BUILD_DIR}/heroku.props"
fi

if [ ! "$FAN_URL" ]; then
  FAN_URL=$(eval echo \$FANTOM_URL_$(eval echo $FAN_VERSION | tr "\." "_"))

  if [ ! "$FAN_URL" ]; then
    echo "-----> Unknown Fantom version: $FAN_VERSION"
  fi
fi

echo "-----> Java version        : $JAVA_VERSION"
echo "-----> Fantom version      : $FAN_VERSION"
echo "-----> Fantom download URL : $FAN_URL"
echo "-----> Fantom build target : $FAN_BUILD_TARGET"
echo ""



# ---- Install Java JDK ----

# set this before the jdk install messes with it
PATH_ORIG=$PATH

# create "system.properties" as used by the Java Buildpack
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo -n "-----> Creating file 'system.properties' for use by JVM Buildpack... "
  echo "java.runtime.version=$JAVA_VERSION" > ${BUILD_DIR}/system.properties
  echo "done"
fi

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

# install JDK 
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}... "
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

# we have no need for the cache dir
# if [ ! -d $CACHE_DIR ] ; then
#   mkdir $CACHE_DIR
# fi
# cd $CACHE_DIR



# ---- Install Fantom ----

cd $BUILD_DIR

export FAN_HOME=$BUILD_DIR/.fan/
export PATH=$FAN_HOME/bin:$PATH

echo -n "-----> Downloading $FAN_URL ... "
curl --silent --location $FAN_URL > fantom-$FAN_VERSION.zip
echo "done"

echo -n "-----> Installing Fantom $FAN_VERSION... "

# Linux has no 'unzip' so we use 'jar' instead
# http://stackoverflow.com/questions/16599128/how-to-unzip-files-in-a-heroko-buildpack
jar xf fantom-$FAN_VERSION.zip

# surprisingly Fantom permissions are not stored in the .zip
chmod +r+x fantom-$FAN_VERSION/bin/*
mv fantom-$FAN_VERSION $FAN_HOME

rm fantom-$FAN_VERSION.zip
echo "done"

# print fantom version details to prove it works
echo ""
fan -version 2>&1 | sed -u 's/^/       /'
echo ""



# ---- Run Fantom Build Tasks ----

echo "-----> Calling Build Target: herokuPreCompile..."
fan $OPT_DIR/callBuildTarget.fan $BUILD_DIR/build.fan herokuPreCompile 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

echo "-----> Calling Build Target: $FAN_BUILD_TARGET..."
fan build.fan $FAN_BUILD_TARGET 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

echo "-----> Creating Procfile..."
fan $OPT_DIR/createProcfile.fan $BUILD_DIR/build.fan $BUILD_DIR/Procfile 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

# https://devcenter.heroku.com/articles/profiled
PROFILE_PATH="$BUILD_DIR/.profile.d/fan.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo "export PATH=/app/.fan/bin:/app/.jdk/bin:$PATH_ORIG" >> $PROFILE_PATH
echo "export FAN_HOME=/app/.fan" >> $PROFILE_PATH
