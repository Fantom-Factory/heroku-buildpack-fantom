#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

FANTOM_URL_1_0_66="https://bitbucket.org/fantom/fan-1.0/downloads/fantom-1.0.66.zip"
FANTOM_URL_1_0_65="http://fan.googlecode.com/files/fantom-1.0.65.zip"

# absolute path
BIN_DIR=$(cd $(dirname $0); pwd)
OPT_DIR=$(cd $BIN_DIR/../opt; pwd)

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# create default system.properties 
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  #echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
  #echo "fantom.version=1.0.66" >> ${BUILD_DIR}/system.properties
  echo "fantom.version=1.0.66" > ${BUILD_DIR}/system.properties
fi

echo "----system.properties"
cat ${BUILD_DIR}/system.properties



# ---- Install Java JDK ----

# set this before the jdk install messes with it
PATH_ORIG=$PATH

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

## install JDK 
#javaVersion=$(detect_java_version ${BUILD_DIR})
#echo -n "-----> Installing OpenJDK ${javaVersion}... "
#install_java ${BUILD_DIR} ${javaVersion}
#jdk_overlay ${BUILD_DIR}
#echo "done"

# we have no need for the cache dir
# if [ ! -d $CACHE_DIR ] ; then
#   mkdir $CACHE_DIR
# fi
# cd $CACHE_DIR



# ---- Install Fantom ----

cd $BUILD_DIR

# we need the FAN_VERSION because the zip entires are `/fantom-1.0.66/bin/fan.exe`
echo -n "getting 1"
fanVersion=$(get_app_system_value ${baseDir}/system.properties "fantom.version")
echo -n "getting 2"
FAN_VERSION=$fanVersion
echo -n "getting 3"
echo -n "FAN V: $FAN_VERSION"
FAN_URL=$(eval echo $FAN_VERSION | tr "\." "_")
echo "FAN U: $FAN_URL"

  #minorJdkVersion=\$JDK_URL_1_$(expr "${jdkVersion}" : '1.\([6-8]\)')
 # jdkUrl=$(eval echo \$JDK_URL_1_${minorJdkVersion}${osSuffix})
 # echo "${jdkUrl}"

export FAN_HOME=$BUILD_DIR/.fan
export PATH=$FAN_HOME/bin:$PATH

echo -n "-----> Downloading $FAN_URL ... "
curl --silent --location $FAN_URL > fantom-$FAN_VERSION.zip
echo "done"

echo -n "-----> Installing Fantom $FAN_VERSION... "

# Linux has no 'unzip' so we use 'jar' instead
# http://stackoverflow.com/questions/16599128/how-to-unzip-files-in-a-heroko-buildpack
jar xf fantom-$FAN_VERSION.zip

# surprisingly Fantom permissions are not stored in the .zip
chmod +r+x fantom-$FAN_VERSION/bin/*
mv fantom-$FAN_VERSION $FAN_HOME

rm fantom-$FAN_VERSION.zip
echo "done"

# print fantom version details to prove it works
echo ""
fan -version 2>&1 | sed -u 's/^/       /'
echo ""
 
echo "-----> Calling Build Target: herokuPreCompile..."
fan $OPT_DIR/callBuildTarget.fan $BUILD_DIR/build.fan herokuPreCompile 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

echo "-----> Calling Build Target: compile..."
fan build.fan compile 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

echo "-----> Creating Procfile..."
fan $OPT_DIR/createProcfile.fan $BUILD_DIR/build.fan $BUILD_DIR/Procfile 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

# https://devcenter.heroku.com/articles/profiled
PROFILE_PATH="$BUILD_DIR/.profile.d/fan.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo "export PATH=/app/.fan/bin:/app/.jdk/bin:$PATH_ORIG" >> $PROFILE_PATH
echo "export FAN_HOME=/app/.fan" >> $PROFILE_PATH
